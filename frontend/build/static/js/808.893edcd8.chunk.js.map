{"version":3,"file":"static/js/808.893edcd8.chunk.js","mappings":"0JAkBA,IAfkB,SAACA,GACf,OACI,+BACI,SAAC,KAAD,CAASC,GAAE,yBAAoBD,EAAIE,IAAMC,UAAU,WAAWC,MAAO,CAAEC,gBAAgB,OAAD,OAASL,EAAIM,MAAb,MAAtF,UACI,gBAAKH,UAAU,qBAAf,UACI,iBAAKA,UAAU,kBAAf,WACI,iBAAMA,UAAU,iBAAhB,SAAkCH,EAAIO,QACtC,iBAAMJ,UAAU,kBAAhB,sBAAyCH,EAAIQ,OAA7C,kB,2LC8DxB,EA9DiB,WACb,IAAMC,GAASC,EAAAA,EAAAA,MAAYD,OAE3B,GAAoCE,EAAAA,EAAAA,YAApC,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAoCF,EAAAA,EAAAA,YAApC,eAAOG,EAAP,KAAmBC,EAAnB,KAEA,GAAsDC,EAAAA,EAAAA,KAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAevC,OAbAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAkB,mCAAG,oGACIH,EAAY,GAAD,OAC/BI,4CAD+B,uBACiBd,GACnD,OAHmB,OACjBe,EADiB,OAKvBX,EAAcW,EAAaC,MAC3BV,EAAcS,EAAaE,UANJ,2CAAH,qDAQxBJ,MAED,CAACH,EAAaV,KAGb,iCACI,SAACkB,EAAA,EAAD,CAAYT,MAAOA,EAAOU,QAASR,IAClCH,IAAa,SAACY,EAAA,EAAD,CAAgBC,WAAW,KAEzC,SAAC,KAAD,CAAM3B,UAAU,YAAhB,UAEMc,GAAaL,IAAc,iCACzB,iBAAKT,UAAU,0BAAf,WACI,SAAC,KAAD,CAAQA,UAAU,kBAAlB,mBAAwCS,EAAWmB,UAAnD,aACCjB,IACG,SAAC,KAAD,UACKA,EAAWkB,KAAI,SAAChC,GAAD,OACZ,SAACiC,EAAA,EAAD,CAAyB/B,GAAIF,EAAIkC,IAAK3B,KAAMP,EAAIO,KAAM4B,KAAMnC,EAAImC,KAAMC,MAAOpC,EAAIoC,MAAO5B,OAAQR,EAAIQ,OAAQ6B,OAAQrC,EAAIqC,OAAQC,OAAQtC,EAAIsC,OAAQC,MAAOvC,EAAIuC,MAAOC,QAASxC,EAAIwC,QAASC,OAAQzC,EAAIyC,OAAQC,IAAK1C,EAAI0C,IAAKpC,MAAK,UAAKN,EAAIM,QAA5NN,EAAIkC,YAG7BpB,GAAoC,IAAtBA,EAAW6B,UACpB,SAAC,KAAD,oBAAoB/B,EAAWmB,UAA/B,0BAIZ,gBAAK5B,UAAU,qBAAf,UACI,gBAAKA,UAAU,uBAAf,UACI,iBAAKA,UAAU,mBAAf,WACI,gBAAKA,UAAU,aAAf,2BACA,0CAAgB,qCAAWS,EAAWmB,UAAtB,WAChB,yCAAe,qCAAWnB,EAAWgC,SAAtB,WACf,qCAAW,qCAAWhC,EAAWiC,MAAtB,WACX,qCAAW,qCAAWjC,EAAWkC,aACjC,mCAAS,0BAAOlC,EAAW8B,IAAX,WAAqB9B,EAAW8B,KAAQ,uD","sources":["pages/Adminpages/Components/PetToEdit.jsx","pages/Adminpages/Views/FullUser.js"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\r\nimport '../../Searchpage/Components/PetSimple.css'\r\n\r\nconst PetToEdit = (pet) => {\r\n    return (\r\n        <>\r\n            <NavLink to={`/admin/editPet/${pet.id}`} className=\"pet-card\" style={{ backgroundImage: `url(${pet.image})` }}>\r\n                <div className=\"pet-card-container\">\r\n                    <div className=\"pet-card-header\">\r\n                        <span className=\"pet-card-title\">{pet.name}</span>\r\n                        <span className=\"pet-card-status\">{`  (${pet.status})`}</span>\r\n                    </div>\r\n                </div>\r\n            </NavLink>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PetToEdit;","import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport './FullUser.css'\r\nimport { Center, Grid, ImageContainer } from '../../../shared/UIKit';\r\nimport ErrorModal from '../../../shared/UIKit/Elements/ErrorModal';\r\nimport LoadingSpinner from '../../../shared/UIKit/Elements/LoadingSpinner/LoadingSpinner';\r\nimport { useHttpClient } from '../../../shared/Hooks/http-hook';\r\nimport PetToEdit from '../Components/PetToEdit';\r\n\r\nconst FullUser = () => {\r\n    const userId = useParams().userId;\r\n\r\n    const [loadedUser, setLoadedUser] = useState();\r\n    const [loadedPets, setLoadedPets] = useState();\r\n\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    useEffect(() => {\r\n        const getUserAndUserPets = async () => {\r\n            const responseData = await sendRequest(\r\n                `${process.env.REACT_APP_BACKEND_URL}/users/full/${userId}`,\r\n                'GET'\r\n            );\r\n            setLoadedUser(responseData.user);\r\n            setLoadedPets(responseData.userPets)\r\n        };\r\n        getUserAndUserPets();\r\n\r\n    }, [sendRequest, userId]);\r\n\r\n    return (\r\n        <>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            {isLoading && <LoadingSpinner asOverlay={true} />}\r\n\r\n            <Grid className='user-page'>\r\n\r\n                {!isLoading && loadedUser && <>\r\n                    <div className=\"user-pets-image-section\">\r\n                        <Center className=\"user-pets-title\">{`${loadedUser.firstName}'s Pets`}</Center>\r\n                        {loadedPets &&\r\n                            <ImageContainer>\r\n                                {loadedPets.map((pet) => (\r\n                                    <PetToEdit key={pet._id} id={pet._id} name={pet.name} type={pet.type} breed={pet.breed} status={pet.status} height={pet.height} weight={pet.weight} color={pet.color} hypoall={pet.hypoall} dietno={pet.dietno} bio={pet.bio} image={`${pet.image}`} />\r\n                                ))}\r\n                            </ImageContainer>}\r\n                        {(!loadedPets || loadedPets.length === 0) &&\r\n                                <ImageContainer>{`${loadedUser.firstName} Has No Pets Yet`}</ImageContainer>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className='about-user-section'>\r\n                        <div className=\"about-user-container\">\r\n                            <div className=\"about-user-inner\">\r\n                                <div className='user-title'>{`User Details`}</div>\r\n                                <div>First Name:<span>{` ${loadedUser.firstName} `}</span></div>\r\n                                <div>Last Name:<span>{` ${loadedUser.lastName} `}</span></div>\r\n                                <div>Email:<span>{` ${loadedUser.email} `}</span></div>\r\n                                <div>Phone:<span>{` ${loadedUser.phone}`}</span></div>\r\n                                <div>Bio:<span>{loadedUser.bio ? ` ${loadedUser.bio}` : ' ( ... More shall be revealed)'}</span></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </>}\r\n\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FullUser;"],"names":["pet","to","id","className","style","backgroundImage","image","name","status","userId","useParams","useState","loadedUser","setLoadedUser","loadedPets","setLoadedPets","useHttpClient","isLoading","error","sendRequest","clearError","useEffect","getUserAndUserPets","process","responseData","user","userPets","ErrorModal","onClear","LoadingSpinner","asOverlay","firstName","map","PetToEdit","_id","type","breed","height","weight","color","hypoall","dietno","bio","length","lastName","email","phone"],"sourceRoot":""}