{"version":3,"file":"static/js/163.54105853.chunk.js","mappings":"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","sources":["pages/MyPetspage/Components/MyPetList.jsx","pages/MyPetspage/Components/SavedPetList.jsx","pages/MyPetspage/Views/MyPets.js","pages/Searchpage/Components/PetSimple.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport PetSimple from \"../../../pages/Searchpage/Components/PetSimple\";\r\nimport { useHttpClient } from \"../../../shared/Hooks/http-hook\";\r\nimport { Center, ImageContainer, Inner, Btn } from \"../../../shared/UIKit\";\r\nimport ErrorModal from \"../../../shared/UIKit/Elements/ErrorModal\";\r\nimport LoadingSpinner from \"../../../shared/UIKit/Elements/LoadingSpinner/LoadingSpinner\";\r\n\r\nconst MyPetList = () => {\r\n  const userId = useParams().userId;\r\n\r\n  const [loadedPets, setLoadedPets] = useState([]);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  useEffect(() => {\r\n    const fullUserRequest = async () => {\r\n      const responseData = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/users/full/${userId}`,\r\n        'GET'\r\n      );\r\n      setLoadedPets(responseData.userPets);\r\n    };\r\n    fullUserRequest();\r\n  }, [sendRequest, userId]);\r\n\r\n  if (!loadedPets) {\r\n    return (\r\n      <>\r\n        <ErrorModal nobackdrop={false} error={error} onClear={clearError} />\r\n        {isLoading && <LoadingSpinner asOverlay={true} />}\r\n        <div className=\"\">\r\n          <Inner>\r\n            <Center><h3 style={{ padding: '25px 0' }}>No pets found. You should adopt one!</h3></Center>\r\n            <Center><Btn to='/search'>Go To The Search Page</Btn></Center>\r\n          </Inner>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  if (!loadedPets || loadedPets.length === 0) {\r\n    return (\r\n        <>\r\n            {isLoading && <LoadingSpinner asOverlay={true} />}\r\n\r\n            <div className=\"\">\r\n                <Inner>\r\n                    <Center><h3 style={{ padding: '25px 0' }}>You don't have any pets yet. Check out the search page!</h3></Center>\r\n                    <Center><Btn to='/search'>Go To The Search Page</Btn></Center>\r\n                </Inner>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal nobackdrop={false} error={error} onClear={clearError} />\r\n      {isLoading && <LoadingSpinner asOverlay={true} />}\r\n\r\n      <ImageContainer>\r\n        {loadedPets.map((pet) => (\r\n          <PetSimple key={pet._id} id={pet._id} name={pet.name} image={`${pet.image}`} breed={pet.breed} status={pet.status} />\r\n        ))}\r\n      </ImageContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyPetList;","import { useContext, useEffect, useState } from \"react\";\r\n\r\nimport PetSimple from \"../../../pages/Searchpage/Components/PetSimple\";\r\nimport { AuthContext } from \"../../../shared/contexts/auth-context\";\r\nimport { useHttpClient } from \"../../../shared/Hooks/http-hook\";\r\nimport { Center, ImageContainer, Inner, Btn } from \"../../../shared/UIKit\";\r\nimport ErrorModal from \"../../../shared/UIKit/Elements/ErrorModal\";\r\nimport LoadingSpinner from \"../../../shared/UIKit/Elements/LoadingSpinner/LoadingSpinner\";\r\n\r\nconst SavedPetList = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { User } = auth;\r\n  const [savedPets, setSavedPets] = useState([]);\r\n\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  useEffect(() => {\r\n    const userRequest = async () => {\r\n      const response = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/users/${User._id}`,\r\n        \"GET\"\r\n      );\r\n      const currentUserData = response.user;\r\n      setSavedPets(currentUserData.savedPets);\r\n    };\r\n    userRequest();\r\n  }, [User, sendRequest]);\r\n\r\n  if (!savedPets || savedPets.length === 0) {\r\n    return (\r\n      <>\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        {isLoading && <LoadingSpinner asOverlay={true} />}\r\n\r\n        <div className=\"\">\r\n          <Inner>\r\n            <Center>\r\n              <h3 style={{ padding: \"25px 0\" }}>\r\n                No saved pets found. Check out the search page!\r\n              </h3>\r\n            </Center>\r\n            <Center>\r\n              <Btn to=\"/search\">Go To The Search Page</Btn>\r\n            </Center>\r\n          </Inner>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && <LoadingSpinner asOverlay={true} />}\r\n\r\n      <ImageContainer>\r\n        {savedPets.map((pet) => (\r\n          <PetSimple\r\n            isSaved={true}\r\n            key={pet._id}\r\n            id={pet._id}\r\n            name={pet.name}\r\n            image={`${pet.image}`}\r\n            breed={pet.breed}\r\n            status={pet.status}\r\n          />\r\n        ))}\r\n      </ImageContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedPetList;\r\n","import { useState } from \"react\";\r\nimport { Center } from \"../../../shared/UIKit\";\r\nimport MyPetList from \"../Components/MyPetList\";\r\nimport SavedPetList from \"../Components/SavedPetList\";\r\n\r\nconst MyPets = () => {\r\n    const [inMyPetsState, setInMyPetsState] = useState(true);\r\n\r\n    const savedPetsViewHandler = () => {\r\n        setInMyPetsState(false);\r\n    };\r\n    const myPetsViewHandler = () => {\r\n        setInMyPetsState(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ padding: '0 25px' }}>\r\n                <Center><h1 style={{ padding: '15px 0' }}>{inMyPetsState ? 'My Pets' : 'Saved Pets'}</h1></Center>\r\n                <Center><div className='new-user-prompt'>Show me\r\n                    {inMyPetsState ?\r\n                        <span className='signup-link' onClick={savedPetsViewHandler}> Saved Pets</span>\r\n                        :\r\n                        <span className='signup-link' onClick={myPetsViewHandler}> My Pets</span>}</div></Center>\r\n                <Center><div className='dividing-line'></div></Center>\r\n                {inMyPetsState ? <MyPetList /> : <SavedPetList />}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MyPets;","import { NavLink } from \"react-router-dom\";\r\nimport './PetSimple.css'\r\n\r\nconst PetSimple = ({ id, name, image, status }) => {\r\n    return (\r\n        <NavLink to={`/pet/${id}`} className=\"pet-card\" style={{ backgroundImage: `url('${image}')` }}>\r\n            <div className=\"pet-card-container\">\r\n                <div className=\"pet-card-header\">\r\n                    <span className=\"pet-card-title\">{name}</span>\r\n                    <span className=\"pet-card-status\">{`  (${status})`}</span>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default PetSimple;"],"names":["userId","useParams","useState","loadedPets","setLoadedPets","useHttpClient","isLoading","error","sendRequest","clearError","useEffect","fullUserRequest","process","responseData","userPets","length","ErrorModal","nobackdrop","onClear","LoadingSpinner","asOverlay","map","pet","PetSimple","id","_id","name","image","breed","status","className","style","padding","to","User","useContext","AuthContext","savedPets","setSavedPets","userRequest","response","currentUserData","user","isSaved","inMyPetsState","setInMyPetsState","onClick","backgroundImage"],"sourceRoot":""}